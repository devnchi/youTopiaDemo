'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var Avatar = require('avataaars');
var Avatar__default = _interopDefault(Avatar);
var map = _interopDefault(require('lodash/map'));

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".styles_container__2pRR5 {\n  position:relative;\n  width:400px;\n}\n\n.styles_avatar__2VLtI {\n  display: block;\n  width:315px;\n  vertical-align: top;\n  height:235px;\n  padding-left:20px;\n}\n\n.styles_tabs__zfQpR {\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  right:50px;\n  top:8px;\n  width:100px;\n}\n\n.styles_tab__3CxtV {\n  font-size:12px;\n  text-align: center;\n  border:1px solid transparent;\n  padding: 4px;\n  border-radius: 4px;\n  cursor: pointer;\n  color:#007bff;\n}\n\n.styles_selectedTab__3XKBa {\n  background: #007bff;\n  color: white;\n}\n\n.styles_tabpanes__2uRkn {\n  box-sizing: border-box;\n  display: inline-block;\n  width: 400px;\n}\n\n.styles_tabpane__XUdZl {\n  box-sizing: border-box;\n  display: none;\n  width:400px;\n  padding:0 10px 10px;\n}\n\n.styles_visible__3TqW5 {\n  display:flex;\n  align-items: center;\n  justify-items: center;\n  flex-wrap: wrap;\n  align-content: center;\n  justify-content: center;\n}\n\n.styles_piece__2PSWK {\n  display: inline-block;\n  position: relative;\n  overflow: hidden;\n}\n\n.styles_piece__2PSWK:hover {\n  background-color: #cce5ff;\n  cursor: pointer;\n}\n\n.styles_none__3LJZL {\n  opacity: .2;\n  font-size: 11px;\n  position: absolute;\n  top: 20px;\n  left: 9px;\n}\n\n.styles_divider__3zNPB {\n  display: block;\n  width: 100%;\n  height:20px;\n  padding:5px 60px;\n}\n\n.styles_divider__3zNPB > div {\n  height: 1px;\n  background-color: #dee2e6;\n}\n\n.styles_colorContainer__NbBrA {\n  display:flex;\n  align-items: center;\n  justify-items: center;\n  flex-wrap: wrap;\n  align-content: center;\n  justify-content: center;\n}\n\n.styles_color__3GZQJ {\n  display: inline-block;\n  height: 26px;\n  width:23px;\n  cursor: pointer;\n}\n\n.styles_color__3GZQJ[color=#FFFFFF] {\n  border:1px solid #ccc;\n}";
var styles = { "container": "styles_container__2pRR5", "avatar": "styles_avatar__2VLtI", "tabs": "styles_tabs__zfQpR", "tab": "styles_tab__3CxtV", "selectedTab": "styles_selectedTab__3XKBa", "tabpanes": "styles_tabpanes__2uRkn", "tabpane": "styles_tabpane__XUdZl", "visible": "styles_visible__3TqW5", "piece": "styles_piece__2PSWK", "none": "styles_none__3LJZL", "divider": "styles_divider__3zNPB", "colorContainer": "styles_colorContainer__NbBrA", "color": "styles_color__3GZQJ" };
styleInject(css);

var options = [{
    label: 'Head',
    type: 'top',
    attribute: 'topType',
    values: ["NoHair", "Eyepatch", "Hat", "Hijab", "Turban", "WinterHat1", "WinterHat2", "WinterHat3", "WinterHat4", "LongHairBigHair", "LongHairBob", "LongHairBun", "LongHairCurly", "LongHairCurvy", "LongHairDreads", "LongHairFrida", "LongHairFro", "LongHairFroBand", "LongHairNotTooLong", "LongHairShavedSides", "LongHairMiaWallace", "LongHairStraight", "LongHairStraight2", "LongHairStraightStrand", "ShortHairDreads01", "ShortHairDreads02", "ShortHairFrizzle", "ShortHairShaggyMullet", "ShortHairShortCurly", "ShortHairShortFlat", "ShortHairShortRound", "ShortHairShortWaved", "ShortHairSides", "ShortHairTheCaesar", "ShortHairTheCaesarSidePart"],
    colorAttribute: 'hairColor',
    colors: {
        "Auburn": "#A55728",
        "Black": "#2C1B18",
        "Blonde": "#B58143",
        "BlondeGolden": "#D6B370",
        "Brown": "#724133",
        "BrownDark": "#4A312C",
        "PastelPink": "#F59797",
        "Platinum": "#ECDCBF",
        "Red": "#C93305",
        "SilverGray": "#E8E1E1"
    },
    hats: ["Hat", "Hijab", "Turban", "WinterHat1", "WinterHat2", "WinterHat3", "WinterHat4"],
    hatColors: {
        "Black": "#262E33",
        "Blue01": "#65C9FF",
        "Blue02": "#5199E4",
        "Blue03": "#25557C",
        "Gray01": "#E6E6E6",
        "Gray02": "#929598",
        "Heather": "#3C4F5C",
        "PastelBlue": "#B1E2FF",
        "PastelGreen": "#A7FFC4",
        "PastelOrange": "#FFDEB5",
        "PastelRed": "#FFAFB9",
        "PastelYellow": "#FFFFB1",
        "Pink": "#FF488E",
        "Red": "#FF5C5C",
        "White": "#FFFFFF"

    }
}, {
    label: 'Facial Hair',
    type: 'facialHair',
    attribute: 'facialHairType',
    values: ["Blank", "BeardMedium", "BeardLight", "BeardMajestic", "MoustacheFancy", "MoustacheMagnum"],
    colorAttribute: 'facialHairColor',
    colors: {
        "Auburn": "#A55728",
        "Black": "#2C1B18",
        "Blonde": "#B58143",
        "BlondeGolden": "#D6B370",
        "Brown": "#724133",
        "BrownDark": "#4A312C",
        "Platinum": "#ECDCBF",
        "Red": "#C93305"
    }
}, {
    label: 'Eyes',
    type: 'eyes',
    attribute: 'eyeType',
    transform: 'scale(2) translate(14px,16px)',
    values: ["Close", "Cry", "Default", "Dizzy", "EyeRoll", "Happy", "Hearts", "Side", "Squint", "Surprised", "Wink", "WinkWacky"]
}, {
    label: 'Eyebrows',
    type: 'eyebrows',
    attribute: 'eyebrowType',
    transform: 'scale(2) translate(13px,18px)',
    values: ["Angry", "AngryNatural", "Default", "DefaultNatural", "FlatNatural", "RaisedExcited", "RaisedExcitedNatural", "SadConcerned", "SadConcernedNatural", "UnibrowNatural", "UpDown", "UpDownNatural"]
}, {
    label: 'Accessories',
    type: 'accessories',
    attribute: 'accessoriesType',
    values: ["Blank", "Kurt", "Prescription01", "Prescription02", "Round", "Sunglasses", "Wayfarers"]
}, {
    label: 'Mouth',
    type: 'mouth',
    attribute: 'mouthType',
    transform: 'scale(2.5) translate(14px,12px)',
    values: ["Concerned", "Default", "Disbelief", "Eating", "Grimace", "Sad", "ScreamOpen", "Serious", "Smile", "Tongue", "Twinkle", "Vomit"]
}, {
    label: 'Clothes',
    type: 'clothe',
    attribute: 'clotheType',
    values: ["BlazerShirt", "BlazerSweater", "CollarSweater", "GraphicShirt", "Hoodie", "Overall", "ShirtCrewNeck", "ShirtScoopNeck", "ShirtVNeck"],
    colorAttribute: 'clotheColor',
    colors: {
        "Black": "#262E33",
        "Blue01": "#65C9FF",
        "Blue02": "#5199E4",
        "Blue03": "#25557C",
        "Gray01": "#E6E6E6",
        "Gray02": "#929598",
        "Heather": "#3C4F5C",
        "PastelBlue": "#B1E2FF",
        "PastelGreen": "#A7FFC4",
        "PastelOrange": "#FFDEB5",
        "PastelRed": "#FFAFB9",
        "PastelYellow": "#FFFFB1",
        "Pink": "#FF488E",
        "Red": "#FF5C5C",
        "White": "#FFFFFF"
    }
}, {
    label: 'Skin',
    type: 'skinColor',
    attribute: 'skinColor',
    values: [],
    colorAttribute: 'skinColor',
    colors: {
        "Tanned": "#FD9841",
        "Yellow": "#F8D25C",
        "Pale": "#FFDBB4",
        "Light": "#EDB98A",
        "Brown": "#D08B5B",
        "DarkBrown": "#AE5D29",
        "Black": "#614335"
    }
}];

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

function AvataaarsCustomizer(props) {
  var _React$useState = React.useState('top'),
      _React$useState2 = slicedToArray(_React$useState, 2),
      selectedTab = _React$useState2[0],
      setSelectedTab = _React$useState2[1];

  function pieceClicked(attr, val) {
    var newAttributes = _extends({}, props.value, defineProperty({}, attr, val));
    if (props.onChange) {
      props.onChange(newAttributes);
    }
  }

  return React.createElement(
    'div',
    { className: styles.container },
    React.createElement(
      'div',
      { className: styles.avatar },
      React.createElement(Avatar__default, _extends({
        style: { width: '200px', height: '200px' },
        avatarStyle: 'Circle'
      }, props.value))
    ),
    React.createElement(
      'div',
      { className: styles.tabs },
      map(options, function (option) {
        return React.createElement(
          'div',
          {
            className: styles.tab + ' ' + (selectedTab == option.type ? styles.selectedTab : ''),
            onClick: function onClick() {
              return setSelectedTab(option.type);
            }
          },
          option.label
        );
      })
    ),
    React.createElement(
      'div',
      { className: styles.tabpanes },
      map(options, function (option) {
        return React.createElement(
          'div',
          { className: styles.tabpane + ' ' + (selectedTab == option.type ? styles.visible : '') },
          map(option.values, function (val) {
            var attr = {};
            attr[option.attribute] = val;
            if (option.transform) {
              attr.style = { transform: option.transform };
            }
            return React.createElement(
              'div',
              { className: styles.piece, onClick: function onClick() {
                  return pieceClicked(option.attribute, val);
                } },
              React.createElement(Avatar.Piece, _extends({ pieceSize: '50', pieceType: option.type }, attr)),
              (val === 'Blank' || val === 'NoHair') && React.createElement(
                'div',
                { className: styles.none },
                '(none)'
              )
            );
          }),
          React.createElement(
            'div',
            { className: styles.colorContainer },
            option.colors && (option.type !== 'top' || option.hats.indexOf(props.value.topType) === -1) && props.value.topType !== 'Eyepatch' && props.value.topType !== 'LongHairShavedSides' && props.value.topType !== 'LongHairFrida' && map(option.colors, function (color, colorName) {
              return React.createElement('div', {
                className: styles.color,
                style: { backgroundColor: color, border: color === '#FFFFFF' ? '1px solid #ccc' : '1px solid ' + color },
                onClick: function onClick() {
                  return pieceClicked(option.colorAttribute, colorName);
                }
              });
            }),
            option.hatColors && option.hats.indexOf(props.value.topType) !== -1 && props.value.topType !== 'Hat' && map(option.hatColors, function (color, colorName) {
              return React.createElement('div', {
                className: styles.color,
                style: { backgroundColor: color, border: color === '#FFFFFF' ? '1px solid #ccc' : '1px solid ' + color },
                onClick: function onClick() {
                  return pieceClicked('hatColor', colorName);
                }
              });
            })
          )
        );
      })
    )
  );
}

module.exports = AvataaarsCustomizer;
//# sourceMappingURL=index.js.map
